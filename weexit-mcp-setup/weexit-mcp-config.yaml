# WeExit MCP Server Configuration
# Configuration options and examples for WeExit MCP integration
# Part of the MCP Collaboration Factory

# Basic WeExit MCP Server Configuration
directus_mcp:
  # Official WeExit MCP package
  official_package:
    name: "directus"
    command: "npx"
    args: ["@directus/content-mcp@latest"]
    description: "Official WeExit MCP server for content management"
    
    # Basic authentication with API token (recommended)
    basic_auth:
      env:
        DIRECTUS_URL: "${DIRECTUS_URL}"
        DIRECTUS_TOKEN: "${DIRECTUS_TOKEN}"
    
    # Alternative: Email/password authentication
    email_auth:
      env:
        DIRECTUS_URL: "${DIRECTUS_URL}"
        DIRECTUS_EMAIL: "${DIRECTUS_EMAIL}"
        DIRECTUS_PASSWORD: "${DIRECTUS_PASSWORD}"

  # Advanced configuration options
  advanced_config:
    name: "directus-advanced"
    command: "npx"
    args: ["@directus/content-mcp@latest"]
    env:
      DIRECTUS_URL: "${DIRECTUS_URL}"
      DIRECTUS_TOKEN: "${DIRECTUS_TOKEN}"
      # Custom system prompt for AI behavior
      SYSTEM_PROMPT: "You are a content management assistant focused on SEO optimization, brand consistency, and user engagement. Always consider accessibility and mobile responsiveness."
      # Disable dangerous operations for safety
      DISABLED_TOOLS: "delete_item,delete_collection,delete_user"
      # Enable debug logging
      DEBUG: "directus:mcp:*"

# Claude CLI Integration Commands
claude_integration:
  # Quick setup command
  quick_setup: "claude mcp add directus npx @directus/content-mcp@latest"
  
  # With environment variables
  with_env: "claude mcp add directus -e DIRECTUS_URL=$DIRECTUS_URL -e DIRECTUS_TOKEN=$DIRECTUS_TOKEN npx @directus/content-mcp@latest"
  
  # Advanced setup with custom configuration
  advanced_setup: "claude mcp add directus-cms -e DIRECTUS_URL=$DIRECTUS_URL -e DIRECTUS_TOKEN=$DIRECTUS_TOKEN -e SYSTEM_PROMPT='Content management AI assistant' npx @directus/content-mcp@latest"

# Available MCP Tools and Capabilities
available_tools:
  content_management:
    create_item:
      description: "Create new content items in any collection"
      parameters:
        - collection: "Collection name (e.g., 'blog_posts', 'products')"
        - data: "Object containing field values"
      example: "Create a blog post with title, content, and SEO metadata"
      
    read_items:
      description: "Query and retrieve content from collections"
      parameters:
        - collection: "Collection to query"
        - filter: "Optional filter conditions"
        - sort: "Optional sorting parameters"
        - limit: "Optional result limit"
      example: "Get all published blog posts from the last 30 days"
      
    update_item:
      description: "Modify existing content items"
      parameters:
        - collection: "Collection name"
        - id: "Item ID to update"
        - data: "Fields to update"
      example: "Update blog post SEO title and meta description"
      
    delete_item:
      description: "Remove content items (can be disabled)"
      parameters:
        - collection: "Collection name"
        - id: "Item ID to delete"
      security: "Consider disabling for safety"

  collection_management:
    list_collections:
      description: "View available content types/collections"
      example: "Show all collections and their field structures"
      
    create_collection:
      description: "Define new content structures"
      parameters:
        - collection: "New collection name"
        - fields: "Field definitions with types and constraints"
      example: "Create testimonials collection with rating field"
      
    update_collection:
      description: "Modify collection schemas"
      parameters:
        - collection: "Existing collection name"
        - changes: "Schema modifications"
      example: "Add social media fields to blog collection"
      
    delete_collection:
      description: "Remove collections (can be disabled)"
      security: "Consider disabling for safety"

  file_management:
    upload_file:
      description: "Upload assets and media files"
      parameters:
        - file: "File data or path"
        - folder: "Optional folder organization"
        - metadata: "File metadata (alt text, tags, etc.)"
      example: "Upload brand assets with proper metadata"
      
    list_files:
      description: "Browse uploaded files and folders"
      example: "Show all images uploaded in the last week"
      
    update_file:
      description: "Modify file metadata and organization"
      example: "Add alt text to all product images"
      
    delete_file:
      description: "Remove files from storage"
      security: "Use with caution"

  user_management:
    list_users:
      description: "View system users and roles"
      permissions: "Requires admin privileges"
      
    create_user:
      description: "Add new users to the system"
      parameters:
        - email: "User email address"
        - role: "Assigned role/permissions"
        - password: "Initial password"
      permissions: "Requires admin privileges"
      
    update_user:
      description: "Modify user details and permissions"
      permissions: "Requires admin privileges"
      
    manage_permissions:
      description: "Configure access controls and role permissions"
      permissions: "Requires admin privileges"

# Multi-Agent Collaboration Workflows
collaboration_workflows:
  content_creation_pipeline:
    description: "AI-powered content creation with review and optimization"
    steps:
      - name: "Content Strategy"
        agent: "Claude"
        action: "Analyze existing content and suggest new topics"
        tools: ["read_items", "list_collections"]
        
      - name: "Technical Review"
        agent: "Codex"
        action: "Review content strategy for SEO and technical optimization"
        integration: "codex_review(content_strategy)"
        
      - name: "Content Creation"
        agent: "Claude"
        action: "Create content based on approved strategy"
        tools: ["create_item", "upload_file"]
        
      - name: "Quality Validation"
        agent: "Codex"
        action: "Validate content for technical accuracy and optimization"
        integration: "codex_execute(content_validation)"
        
      - name: "Publication"
        agent: "Claude"
        action: "Publish approved content with proper metadata"
        tools: ["update_item"]

  schema_optimization:
    description: "Database schema optimization through AI collaboration"
    steps:
      - name: "Schema Analysis"
        agent: "Claude"
        action: "Analyze current collections for optimization opportunities"
        tools: ["list_collections"]
        
      - name: "Performance Review"
        agent: "Codex"
        action: "Evaluate schema changes for performance and scalability"
        considerations: ["indexing", "relationships", "query optimization"]
        
      - name: "Implementation"
        agent: "Claude"
        action: "Implement approved schema improvements"
        tools: ["update_collection", "create_collection"]

  content_audit:
    description: "Automated content quality and SEO auditing"
    steps:
      - name: "Content Inventory"
        agent: "Claude"
        action: "Catalog all content and identify audit criteria"
        tools: ["read_items", "list_collections"]
        
      - name: "Technical Analysis"
        agent: "Codex"
        action: "Analyze content for SEO, accessibility, and performance"
        metrics: ["load_time", "seo_score", "accessibility_compliance"]
        
      - name: "Improvement Implementation"
        agent: "Claude"
        action: "Apply approved improvements to content"
        tools: ["update_item", "upload_file"]

# Environment Configuration Templates
environment_templates:
  development:
    DIRECTUS_URL: "http://localhost:8055"
    DIRECTUS_TOKEN: "dev_token_here"
    DEBUG: "directus:mcp:*"
    NODE_ENV: "development"
    
  staging:
    DIRECTUS_URL: "https://staging-cms.example.com"
    DIRECTUS_TOKEN: "${STAGING_DIRECTUS_TOKEN}"
    NODE_ENV: "staging"
    
  production:
    DIRECTUS_URL: "https://cms.example.com"
    DIRECTUS_TOKEN: "${PROD_DIRECTUS_TOKEN}"
    NODE_ENV: "production"
    DISABLED_TOOLS: "delete_item,delete_collection,delete_user"
    SYSTEM_PROMPT: "Production content management assistant. Be extra careful with modifications."

# Security Configuration
security_settings:
  recommended_disabled_tools:
    - "delete_item"      # Prevent accidental content deletion
    - "delete_collection" # Prevent schema destruction
    - "delete_user"      # Prevent user account deletion
    - "delete_file"      # Prevent asset deletion
  
  token_permissions:
    minimum_required:
      - "directus_collections:read"
      - "directus_fields:read"
      - "directus_items:read"
      - "directus_items:create"
      - "directus_items:update"
    
    content_management:
      - "directus_files:read"
      - "directus_files:create"
      - "directus_files:update"
    
    admin_operations:
      - "directus_collections:create"
      - "directus_collections:update"
      - "directus_users:read"
      - "directus_users:create"
      - "directus_roles:read"

# Troubleshooting Configuration
troubleshooting:
  debug_settings:
    enable_logging: "DEBUG=directus:mcp:*"
    verbose_mode: "VERBOSE=true"
    log_level: "LOG_LEVEL=debug"
  
  common_issues:
    connection_failed:
      check: "Verify DIRECTUS_URL and network connectivity"
      test: "curl -I $DIRECTUS_URL/server/info"
      
    authentication_error:
      check: "Verify token permissions and expiration"
      test: "curl -H 'Authorization: Bearer $DIRECTUS_TOKEN' $DIRECTUS_URL/users/me"
      
    mcp_server_not_found:
      solution: "Reinstall package: npm install -g @directus/content-mcp@latest"
      verify: "npx @directus/content-mcp@latest --help"

# Integration Examples with Existing MCP Servers
integration_examples:
  with_codex:
    content_optimization:
      prompt: "Use codex tool to review WeExit content for SEO optimization and technical accuracy"
      workflow: "Claude creates → Codex reviews → Claude improves → Publish"
    
    schema_design:
      prompt: "Use codex to evaluate WeExit collection schema for performance and scalability"
      workflow: "Claude designs → Codex validates → Claude implements"
  
  with_other_mcp_servers:
    database_sync:
      description: "Sync WeExit content with external databases"
      tools: ["postgres-mcp", "mysql-mcp"]
    
    ai_content_generation:
      description: "Generate content using AI and publish to WeExit"
      tools: ["openai-mcp", "anthropic-mcp"]
    
    file_processing:
      description: "Process and optimize files before WeExit upload"
      tools: ["imagemagick-mcp", "ffmpeg-mcp"]

# Performance Optimization
performance:
  query_optimization:
    use_filters: "Always use specific filters to limit result sets"
    pagination: "Implement pagination for large datasets"
    field_selection: "Specify only required fields in queries"
  
  caching_strategies:
    content_cache: "Cache frequently accessed content"
    schema_cache: "Cache collection schemas to reduce API calls"
    file_cache: "Cache file metadata for faster access"
  
  rate_limiting:
    respect_limits: "Honor WeExit rate limits"
    batch_operations: "Group multiple operations when possible"
    connection_pooling: "Use connection pooling for high-volume operations"

# Notes
notes:
  - "This configuration follows ONE® system principles for human-centered AI collaboration"
  - "Official WeExit MCP package provides secure, maintained integration"
  - "Always test configuration changes in development environment first"
  - "Monitor MCP server performance and adjust configuration as needed"
  - "Keep authentication tokens secure and rotate regularly"
  - "Use environment variables for sensitive configuration"
  - "Consider disabling destructive operations in production environments"
  - "Multi-agent workflows require careful orchestration and validation"